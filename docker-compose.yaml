version: "3.8"

volumes:
  keycloak_db_data:
    driver: local
  postgres_management_db_data:
    driver: local
  postgres_marketplace_db_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  backend-tier:

services:
  postgres_management:
    container_name: postgres_management_qfood
    image: postgres
    volumes:
      - postgres_management_db_data:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: qfood
      POSTGRES_PASSWORD: qfood
    ports:
      - 5432:5432
    networks:
      - backend-tier

  postgres_marketplace:
    container_name: postgres_marketplace_qfood
    image: postgres
    volumes:
      - postgres_marketplace_db_data:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: qfood
      POSTGRES_PASSWORD: qfood
    ports:
      - 5433:5432
    networks:
      - backend-tier

  keycloak_db:
    container_name: keycloak_db
    image: postgres
    volumes:
      - keycloak_db_data:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: keycloak
      POSTGRES_USER: keycloak
      POSTGRES_PASSWORD: keycloak
    networks:
      - backend-tier

  keycloak_qfood:
    container_name: keycloak_qfood
    image: jboss/keycloak
    restart: always
    environment:
      DB_VENDOR: POSTGRES
      DB_ADDR: keycloak_db
      DB_DATABASE: keycloak
      DB_USER: keycloak
      DB_SCHEMA: public
      DB_PASSWORD: keycloak
      #      KEYCLOAK_USER: qfood
      #      KEYCLOAK_PASSWORD: qfood
      # Uncomment the line below if you want to specify JDBC parameters. The parameter below is just an example, and it shouldn't be used in production without knowledge. It is highly recommended that you read the PostgreSQL JDBC driver documentation in order to use it.
    #      JDBC_PARAMS: "ssl=true"
    ports:
      - 8181:8080
    depends_on:
      - keycloak_db
    networks:
      - backend-tier

  jaeger_qfood:
    container_name: jaeger_qfood
    image: jaegertracing/all-in-one
    ports:
      - "5775:5775/udp"
      - "6831:6831/udp"
      - "6832:6832/udp"
      - "5778:5778"
      - "16686:16686"
      - "14268:14268"
      - "14250:14250"
      - "9411:9411"
    networks:
      - backend-tier

  prometheus_qfood:
    container_name: prometheus_qfood
    image: prom/prometheus:v2.1.0
    volumes:
      - ./.Docker/prometheus/:/etc/prometheus/
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    ports:
      - 9090:9090
    networks:
      - backend-tier

  grafana_qfood:
    container_name: grafana_qfood
    image: grafana/grafana
    user: "472"
    depends_on:
      - prometheus_qfood
    ports:
      - 3000:3000
    volumes:
      - grafana_data:/var/lib/grafana
      - ./.Docker/grafana/provisioning/:/etc/grafana/provisioning/
    env_file:
      - ./.Docker/grafana/config.monitoring
    networks:
      - backend-tier

  artemis:
    image: vromero/activemq-artemis:2.15.0-alpine
    ports:
      - "8161:8161"
      - "61616:61616"
      - "5672:5672"
    environment:
      ARTEMIS_USERNAME: qfood
      ARTEMIS_PASSWORD: qfood
    networks:
      - backend-tier

  mongodb_qfood:
    container_name: mongodb_qfood
    image: library/mongo:latest
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: order
      MONGO_INITDB_ROOT_PASSWORD: order
      MONGO_INITDB_DATABASE: order
    networks:
      - backend-tier

  zookeeper-qfood:
    image: confluentinc/cp-zookeeper:5.4.3
    networks:
      - backend-tier
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  kafka-qfood:
    image: confluentinc/cp-kafka:5.4.3
    networks:
      - backend-tier
    depends_on:
      - zookeeper-qfood
    ports:
      - 9092:9092
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper-qfood:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-qfood:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

  kafdrop-qfood:
    image: obsidiandynamics/kafdrop:3.27.0
    networks:
      - backend-tier
    depends_on:
      - kafka-qfood
    ports:
      - 19000:9000
    environment:
      KAFKA_BROKERCONNECT: kafka-qfood:29092

  # se ocorrer [1]: max virtual memory areas vm.max_map_count [65530] is too low,
  # increase to at least [262144]
  # sudo sysctl -w vm.max_map_count=262144
  elastic:
    container_name: elasticsearch
    image: docker.elastic.co/elasticsearch/elasticsearch:7.9.3
    environment:
      - node.name=es01
      - cluster.name=es-docker-cluster
      - cluster.initial_master_nodes=es01
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    ports:
      - 9200:9200
      - 8100:8100
    networks:
      - backend-tier

  kibana:
    container_name: kibana
    image: docker.elastic.co/kibana/kibana:7.9.3
    environment:
      ELASTICSEARCH_HOSTS: http://elasticsearch:9200
    ports:
      - 5601:5601
    networks:
      - backend-tier

#  logstash:
#    container_name: logstash
#    image: docker.elastic.co/logstash/logstash-oss:6.8.2
#    volumes:
#      - source: ./pipelines
#        target: /usr/share/logstash/pipeline
#        type: bind
#    networks:
#      - backend-tier
#    depends_on:
#      - elastic